_ENV = Dora dora.Platformer

import "Tutorial.System" as TutorialSystem
import "Tutorial.AI" as TutorialAI
import "Tutorial.Action" as default: TutorialAction
import "Scene.LoopTowerA"
import "Data.Config"

export default ->
	LoopTowerA\loadAsync!
	world = LoopTowerA!
	with Director.entry
		\removeAllChildren!
		Cache\removeUnused "Texture"
		\addChild world
	Data\setRelation 1, 2, "Enemy"

	Entity\clear!
	Data.store\clear!
	Data.store.world = world
	TutorialAction!
	TutorialAI!
	TutorialSystem!

	chars =
		* ['ninilite', 500, -2, true]
		* [Config.char, 800, 0, false]
	for [name, x, order, faceRight] in *chars
		Entity
			:name
			:faceRight
			:order
			player: name == "charF" or name == "charM"
			group: 1
			position: Vec2 x, world.offset
			tutorial: true

	import "UI.HUDControl"

	Director.ui3D\addChild with HUDControl!
		\schedule once ->
			sleep 0.1
			emit "MessageBox.Add", title: "系统", special: false, text: "已上线/79.03.27.09.24；"
			sleep 0.9
			emit "MessageBox.Add", title: "系统", special: false, text: "代理日志更新，代理第1天；"

	Group(["player", "name"])\each =>
		switch @name when "ninilite"
			@decisionTree = "AI:NiniliteIntro"

	threadLoop ->
		group = Group(["player", "name", "unit"])
		if group.count > 0
			group\each => switch @name when "charF", "charM"
				with @unit.playable
					\setSlot "pistol", with Spine "kineticgun"
						.look = "PT"
						.scaleX = .scaleY = 0.2
				true
			true

	thread ->
		sleep 2
		import "UI.Story"
		with Story "Tutorial/Dialog/firstMeet.yarn"
			\addTo Director.ui3D
			\showAsync!
			\slot "Ended", -> thread ->
				Group(["player",])\each =>
					if @name == "ninilite"
						@unit.playable.speed = 1.0
						@unit.decisionTree = "AI:NiniliteFight"
						@unit\start "cancel"
						return true
					false
				Cache\loadAsync "spine:xiaotaotie"
				Entity
					name: "xiaotaotie"
					position: Vec2 1200, 168
					group: 2
					order: -1
					faceRight: false
					tutorial: true
					monster: true
				sleep 1
				emit "HUD.DisplayMove", true
				import "System.PlayBubbleChat"
				PlayBubbleChat "Tutorial/Dialog/evade.yarn"
				moved = false
				with Observer "Add", ["keyLeft", "player"]
					\watch (_entity, keyLeft) -> if keyLeft then thread ->
						if not moved and Group(["monster",]).count > 0
							moved = true
							PlayBubbleChat "Tutorial/Dialog/evadeLeft.yarn"
							sleep 1
							PlayBubbleChat "Tutorial/Dialog/weapon.yarn"
							emit "Tutorial.Weapon"
						true
				with Observer "AddOrChange", ["keyRight", "player"]
					\watch (_entity, keyRight) -> if keyRight then thread ->
						if not moved and Group(["monster",]).count > 0
							moved = true
							PlayBubbleChat "Tutorial/Dialog/evadeRight.yarn"
							sleep 1
							PlayBubbleChat "Tutorial/Dialog/weapon.yarn"
							emit "Tutorial.Weapon"
						true
